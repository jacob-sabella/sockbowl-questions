plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'maven-publish'
}

ext {
	springAiVersion = "1.0.0-M6"
}

group = 'com.soulsoftworks'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'com.google.code.gson:gson:2.11.0'
	implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter:1.0.0-M6'
	implementation 'org.springframework.ai:spring-ai-neo4j-store-spring-boot-starter:1.0.0-M6'
	implementation 'org.springframework.ai:spring-ai-mcp-client-spring-boot-starter:1.0.0-M6'
	implementation 'com.github.victools:jsonschema-generator:4.38.0'

	compileOnly 'org.projectlombok:lombok:1.18.34'

	annotationProcessor 'org.projectlombok:lombok:1.18.34'
	testCompileOnly 'org.projectlombok:lombok:1.18.34'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('modelsJar', Jar) {
	group = 'build'
	description = 'Jar containing only com.soulsoftworks.sockbowlquestions.models.* classes'
	from sourceSets.main.output
	include 'com/soulsoftworks/sockbowlquestions/models/**'
	archiveBaseName = 'sockbowlquestions-models'
	// use the project version; no classifier so it looks like a normal library
}

tasks.register('modelsSourcesJar', Jar) {
	group = 'build'
	description = 'Sources jar for the models-only artifact'
	from sourceSets.main.allSource
	include 'com/soulsoftworks/sockbowlquestions/models/**'
	archiveBaseName = 'sockbowlquestions-models'
	archiveClassifier = 'sources'
}

publishing {
	publications {
		// A pure-models publication (not the whole app)
		models(MavenPublication) {
			groupId = project.group
			artifactId = 'sockbowlquestions-models'
			version = gitBranchVersion(project)

			artifact tasks.named('modelsJar')
			artifact tasks.named('modelsSourcesJar')

			pom {
				name = 'Sockbowl Questions Models'
				description = 'Models under com.soulsoftworks.sockbowlquestions.models'
				url = 'https://github.com/OWNER/REPO' // <- optional
				licenses {
					license {
						name = 'Apache-2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0'
					}
				}
			}
		}
	}
	repositories {
		// Publish to GitHub Packages (Maven)
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/${System.getenv('GITHUB_REPOSITORY') ?: 'OWNER/REPO'}")
			credentials {
				username = System.getenv("GITHUB_ACTOR") ?: (project.findProperty("gpr.user") ?: "")
				password = System.getenv("GITHUB_TOKEN") ?: (project.findProperty("gpr.key") ?: "")
			}
		}
	}
}

bootBuildImage {
	createdDate = "now"
	imageName = "jacob-sabella/${project.name}:${gitBranchVersion()}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:$springAiVersion"
	}
}

static def gitBranchVersion(def project) {
	def branch
	try {
		branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
		if (branch == 'main' || branch == 'master') {
			return project.version
		} else if (branch.startsWith('release/')) {
			return branch.substring(8) + '-RC'
		} else if (branch.startsWith('feature/')) {
			return branch.substring(8) + '-SNAPSHOT'
		} else {
			return branch + '-UNKNOWN'
		}
	} catch (Exception ignored) {
		return 'UNKNOWN'
	}
}
